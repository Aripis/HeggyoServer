# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Institution {
  createdAt: Date!
  updatedAt: Date!
  id: ID!
  name: String!
  email: String!
  type: InstitutionType!
  capacityPerClass: Int
  educationalStage: EducationStage!
  alias: String!
  user: [User!]
}

"""Date custom scalar type"""
scalar Date

enum InstitutionType {
  TECHNOLOGICAL
  MATHEMATICAL
  NATURAL_MATHEMATICAL
  HUMANITARIAN
  ART
  LINGUISTICAL
  SU
  OU
}

enum EducationStage {
  ELEMENTARY
  PRIMARY
  UNITED
  HIGH
  SECONDARY
}

type User {
  createdAt: Date!
  updatedAt: Date!
  id: ID!
  firstName: String!
  middleName: String!
  lastName: String!
  email: String!
  password: String!
  userRole: UserRoles!
  registerToken: String
  status: UserStatus!
  institution: [Institution!]!
}

enum UserRoles {
  ADMIN
  PARENT
  STUDENT
  TEACHER
  VIEWER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BLOCKED
  UNVERIFIED
}

type CreateInstitutionPayload {
  institutionId: String!
}

type RemoveInstitutionPayload {
  institutionIsRemoved: Boolean!
}

type UpdateInstitutionPayload {
  institutionId: String!
}

type Teacher {
  id: ID!
  user: User!
  education: String
  yearsExperience: Int!
  contractType: ContractType
  teacherToken: String!
}

enum ContractType {
  PART_TIME
  FULL_TIME
}

type UpdateTeacherPayload {
  teacherId: String!
}

type Class {
  id: ID!
  institution: Institution!
  forYear: Int!
  totalStudentCount: Int!
  classTeacher: Teacher!
  classLetter: String!
  classNumber: Int!
  classToken: String!
  classTokenStatus: TokenStatus!
}

enum TokenStatus {
  ACTIVE
  INACTIVE
}

type RemoveClassPayload {
  classId: String!
}

type UpdateClassPayload {
  classId: String!
}

type CreateClassPayload {
  classId: String!
}

type Parent {
  id: ID!
  user: User!
  children: [Student!]!
}

type Student {
  id: ID!
  user: User!
  startDate: Date
  class: Class!
  prevEducation: String!
  studentToken: String!
  parents: [Parent!]
}

type UpdateStudentPayload {
  studentId: String!
}

type UpdateParentPayload {
  parentId: String!
}

type UpdateUserPayload {
  userId: String!
}

type RemoveUserPayload {
  userIsRemoved: Boolean!
}

type CreateUserPayload {
  userId: String!
}

type Token {
  accessToken: String!
  refreshToken: String
}

type Query {
  user(id: String!): User!
  users: [User!]!
  profile: User!
  checkRefreshToken: Boolean!
  login(loginData: LoginInput!): User!
  token: Token!
  institution(id: String!): Institution!
  institutions: [Institution!]!
  teacher(id: String!): Teacher!
  teachers: [Teacher!]!
  class(id: String!): Class!
  classes: Class!
  student(id: String!): Student!
  students: [Student!]!
  parent(id: String!): Parent!
  parents: [Parent!]!
}

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  register(userData: CreateUserInput!): CreateUserPayload!
  removeUser(id: String!): RemoveUserPayload!
  updateUser(userData: UpdateUserInput!): UpdateUserPayload!
  addInstitution(createInstitutionInput: CreateInstitutionInput!): CreateInstitutionPayload!
  removeInstitution(id: String!): RemoveInstitutionPayload!
  updateInstitution(updateInstitutionInput: UpdateInstitutionInput!): UpdateInstitutionPayload!
  updateTeacher(teacherData: UpdateTeacherInput!): UpdateTeacherPayload!
  addClass(createClassInput: CreateClassInput!): CreateClassPayload!
  updatreClass(updateClassInput: UpdateClassInput!): UpdateClassPayload!
  removeClass(id: String!): RemoveClassPayload!
  updateStudent(studentData: UpdateStudentInput!): UpdateStudentPayload!
  updateParent(parentData: UpdateParentInput!): UpdateParentPayload!
}

input CreateUserInput {
  firstName: String!
  middleName: String!
  lastName: String!
  email: String!
  password: String!
  registerToken: String
}

input UpdateUserInput {
  id: String!
  firstName: String
  middleName: String
  lastName: String
  email: String
  password: String
  userRole: UserRoles
}

input CreateInstitutionInput {
  name: String!
  email: String!
  type: InstitutionType!
  capacityPerClass: Int
  educationalStage: EducationStage!
  alias: String!
}

input UpdateInstitutionInput {
  id: String!
  name: String
  email: String
  type: InstitutionType
  capacityPerClass: Int
  educationalStage: EducationStage
  alias: String
}

input UpdateTeacherInput {
  id: String!
  education: String
  yearsExperience: Int
  contractType: ContractType
}

input CreateClassInput {
  forYear: Int!
  totalStudentCount: Int!
  classNumber: Int!
  classLetter: String!
  classTeacher: String
  institution: String!
}

input UpdateClassInput {
  id: String!
  totalStudentCount: Int
  classLetter: String
  classNumber: Int
  classToken: String
  classTokenStatus: TokenStatus
}

input UpdateStudentInput {
  id: String!
  startDate: Date
  classUUID: String
  prevEducation: String
}

input UpdateParentInput {
  id: String!
}
